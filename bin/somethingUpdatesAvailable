#!/bin/bash source-this-script
shopt -qs nullglob

readonly ignoreDirspec=/var/lib/update-notifier
readonly ignoreFilename="${SOMETHING_SUBJECT:?}-updates-ignorelist"
: ${SOMETHING_SUBJECT_NAME:=$SOMETHING_SUBJECT}

: ${SUDO:=sudoWithUnixhome}; [ $EUID -eq 0 ] && SUDO=''	# Need superuser rights for updating the ignore list.

: ${SOMETHING_VERSIONCHANGE_PREFIX=[01m}
: ${SOMETHING_VERSIONCHANGE_SUFFIX=[0m}
if [ ! -t 1 ]; then
    SOMETHING_VERSIONCHANGE_PREFIX=
    SOMETHING_VERSIONCHANGE_SUFFIX=
fi

printUsage()
{
    cat <<HELPTEXT
List $SOMETHING_SUBJECT_NAME packages that are outdated and can be updated. Exits with 1 if all
packages are up-to-date. Also prints ignored packages with -v|--verbose, or just
the plain package names with -V|--terse. Just prints a single summary line with
-s|--summary (and with --silent-if-none omits that if there are no packages to
update).
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-s|--summary [--silent-if-none]] [-v|--verbose|-V|--terse] [--ignore-list IGNORE-LIST-FILESPEC [--ignore-list ...]] [-?|-h|--help]'
    echo
    cat <<HELPTEXT
(Un-)Ignore package matching PATTERN [with an available VERSION-PATTERN] [for a
specific APPLICATION (i.e. using a separate ignore file)].
PATTERN is an AWK-style anchored extended regular expression.
HELPTEXT
    echo
    printf 'Usage: %s%q %s\n' "${SUDO}${SUDO:+ }" "$(basename "$1")" '[--for APPLICATION] -i|--ignore PATTERN [--version VERSION-PATTERN]'
    printf 'Usage: %s%q %s\n' "${SUDO}${SUDO:+ }" "$(basename "$1")" '[--for APPLICATION] -I|--no-ignore PATTERN'
}

isSummary=
isSilentIfNone=
isVerbose=
isTerse=
action=
typeset -a actionArgs=()
versionPattern=
typeset -a additionalIgnoreLists=()
ignoreFor=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	    shift; printUsage "$0"; exit 0;;
	--summary|-s)	    shift; isSummary=t;;
	--silent-if-none)   shift; isSilentIfNone=t;;
	--verbose|-v)	    shift; isVerbose=t;;
	--terse|-V)	    shift; isTerse=t;;
	--ignore-list)	    shift; additionalIgnoreLists+=("$1"); shift;;
	--for)		    shift; ignoreFor="${1:?}"; shift;;
	--ignore|-i)	    shift; action=ignore; actionArgs=(--update "$1"); shift;;
	--no-ignore|-I)	    shift; action=unignore; actionArgs=(--delete "$1"); shift;;
	--version)	    shift; versionPattern="$1"; shift;;
	-*)		    { echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		    break;;
    esac
done
if [ $# -gt 0 ]; then
    printUsage "$0"
    exit 2
elif [ "$isVerbose" ] && [ "$isTerse" ]; then
    echo 'ERROR: Cannot combine --verbose and --terse.'
    echo
    printUsage "$0"
    exit 2
fi >&2

databaseModification()
{
    if [ -n "$ignoreFor" ]; then
	# nanoDB will automatically create the basedir if it doesn't exist yet.
	local basedir="${ignoreDirspec}/${ignoreFilename}.d"
	local table="$ignoreFor"
    else
	local basedir="$ignoreDirspec"
	local table="$ignoreFilename"
    fi
    $SUDO nanoDB --basedir "$basedir" --table "$table" --relaxed-key "$@"
}
databaseRead()
{
    local filespec="${1:?}"; shift
    local basedir="$(dirname -- "$filespec")"
    local table="$(basename -- "$filespec")"
    # Note: No SUDO; a regular user is enough to read the ignore list.
    nanoDB --basedir "$basedir" --table "$table" --relaxed-key "$@"
}
ignore()
{
    databaseModification "$@" --value "${versionPattern:-".*"}"
}
unignore()
{
    databaseModification "$@"
}
getIgnoreList()
{
    local ignoreFilespec; for ignoreFilespec in "${ignoreDirspec}/${ignoreFilename}" "${ignoreDirspec}/${ignoreFilename}.d"/*
    do
	databaseRead "$ignoreFilespec" --get-as-list ' ' --newline-formatting error
    done

    [ ${#additionalIgnoreLists[@]} -gt 0 ] \
	&& cat -- "${additionalIgnoreLists[@]}"
}


if [ "$action" ]; then
    $action "${actionArgs[@]}"
    exit $?
fi

LC_ALL=C eval "${SOMETHING_SOURCE_COMMANDLINE:-${SOMETHING_SUBJECT}-list-outdated}" | \
    awk \
	${SOMETHING_FS:+-F "$SOMETHING_FS"} \
	-v "subjectName=${SOMETHING_SUBJECT_NAME//\\/\\\\}" \
	-v "versionChangePrefix=${SOMETHING_VERSIONCHANGE_PREFIX//\\/\\\\}" \
	-v "versionChangeSuffix=${SOMETHING_VERSIONCHANGE_SUFFIX//\\/\\\\}" \
	-v "isSummary=$isSummary" \
	-v "isSilentIfNone=$isSilentIfNone" \
	-v "isVerbose=$isVerbose" \
	-v "isTerse=$isTerse" \
	-v "updateHint=${SOMETHING_UPDATE_HINT//\\/\\\\}" \
'
{
    if (NR == FNR) {
	ignored[$1] = ($2 == "" ? ".*" : $2)
    } else {
	packageName = $1
	existingVersion = $2
	availableVersion = $3
	highlightedAvailableVersion = $3

	if (versionChangePrefix != "" || versionChangeSuffix != "") {
	    for (i = 1; i <= length(existingVersion) && substr(existingVersion, i, 1) == substr(availableVersion, i, 1); ++i) {}
	    if ((differentTail = substr(availableVersion, i)) != "") {
		highlightedAvailableVersion = substr(availableVersion, 1, i - 1) versionChangePrefix differentTail versionChangeSuffix
	    }
	}

	if (ignored[packageName] && availableVersion ~ "^" ignored[packageName] "$") {
	    if (isVerbose) {
		printf "(%s: Ignoring %s -> %s)\n", packageName, existingVersion, highlightedAvailableVersion
	    }
	} else {
	    count+=1
	    if (! isSummary) {
		if (isTerse) {
		    printf "%s\n", packageName
		} else {
		    printf "%s: %s -> %s\n", packageName, existingVersion, highlightedAvailableVersion
		}
	    }
	}
    }
}
END {
    if (isSummary && (! isSilentIfNone || count > 0))
	printf "%d %s package%s can be updated.\n", count, subjectName, (count == 1 ? "" : "s")
    if (count == 0) exit(1)
    if (! isTerse && updateHint != "") print updateHint
}
' <(getIgnoreList | outputOrPrintf 'dummy-package never\n') -
